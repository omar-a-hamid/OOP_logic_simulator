TODO:
    change all simulate_gate functions in all classes   // DONE?
    make simulator a "singelton"
    complete parsing function       //DONE 

reqs: 

Create a class called "Node" 
    

    Default and non-default Constructor.                                    //DONE: ??
    Provide setters and getters.                                                //DONE
    Overload the operator ostream << to print the node information.         //DONE
    Create methods called AND() / OR() / XOR() to perform the logical...    //DONE
    operation between two nodes objects.



Create a class Called "Gate"

    which has two input nodes and one output node data members.image                        //DONE    
    Default and non-default Constructors.                                                   //DONE: ??
    Provide getters and setters for its nodes.                                              //DONE
    Implement the gate types AND / OR / NAND / NOR / XOR / XNOR / NOT.                      //DONE
    function simulateGate() returns the logic value of the gate according to its type.      //DONE



Create a class called "Simulator"

    which accpets all types of gates then 
    calculate circuitsâ€™ outputs
                                                                                      
    array of pointers to Gate and array of pointers to Node.                                            //DONE
    Method postGate() accepts a pointer to a created gate to insert it into the array.                  //DONE
    Method postNode() accepts a pointer to a created node to insert it into the array.                  //DONE
    Method FindNode() accepts a string node's name to find it in the container and return its address.  //DONE
    Method startSimulate() start the simulation for each gate by looping over the gates container       //DONE

    Only one object can be created from the Simualtor class.                                            //TODO




Create a class called "GateGenerator"

    that generates the nodes and all sepcified gates from the input then post them to the simulator.

    Function parseInput():                                                                              //DONE
        reads the inputs and parses each keyword ("SIM"/"OUT",..) to the appropriate logic.
    Function createNode():                                                                              //DONE
        creates a node and return its address.
    Function createGate():                                                                              //DONE
        creates a (AND,OR,...) gates according to the input and return its address,
        it is advisable to use a factory function to have better practice on polymorphic objects.


tested:
    generator:
        

        create node     //DONE
        create gate     //DONE
    
    
input data:

gate type (such as AND/OR gate)
The inputs and output symbols

AND
OR
XOR
XNOR
NOT
NAND
SET
SIM
OUT

Write "SET" values to the inputs (either 0 or 1)
Write "SIM" to start simulation
Write "OUT" to view the output of a specific node or "OUT ALL" to view all nodes' values

